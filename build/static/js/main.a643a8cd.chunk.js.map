{"version":3,"sources":["node.tsx","tree-node.tsx","tree.tsx","App.tsx","index.tsx"],"names":["Node","props","handle","scaffoldBlockPxWidth","toggleChildrenVisibility","connectDragPreview","connectDragSource","isDragging","canDrop","canDrag","node","title","subtitle","draggedNode","path","treeIndex","isSearchMatch","isSearchFocus","buttons","className","style","didDrop","rowDirection","treeId","isOver","parentNode","otherProps","nodeTitle","nodeSubtitle","rowDirectionClass","children","expanded","Array","map","_","index","classnames","dropEffect","isDraggedDescendant","isDescendant","isLandingPadActive","height","length","width","opacity","btn","TreeNode","listIndex","swapFrom","swapLength","swapDepth","lowerSiblingCounts","connectDropTarget","getPrevRow","scaffoldBlockCount","scaffold","level","forEach","lowerSiblingCount","i","lineClass","push","highlightLineClass","right","left","Children","child","cloneElement","isTouchDevice","window","navigator","maxTouchPoints","dndBackend","TouchBackend","HTML5Backend","Tree","useState","treeData","setTreeData","DndProvider","backend","onChange","result","noDragging","isVirtualized","nextParent","noChildren","theme","nodeContentRenderer","treeNodeRenderer","App","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.a643a8cd.chunk.js","sourcesContent":["import React from \"react\";\nimport { NodeRendererProps, isDescendant } from \"react-sortable-tree\";\nimport classnames from \"clsx\";\nimport \"./node.css\";\n\nfunction Node(props: NodeRendererProps) {\n  const {\n    scaffoldBlockPxWidth,\n    toggleChildrenVisibility,\n    connectDragPreview,\n    connectDragSource,\n    isDragging,\n    canDrop,\n    canDrag,\n    node,\n    title,\n    subtitle,\n    draggedNode,\n    path,\n    treeIndex,\n    isSearchMatch,\n    isSearchFocus,\n    buttons,\n    className,\n    style,\n    didDrop,\n    treeId,\n    isOver, // Not needed, but preserved for other renderers\n    parentNode, // Needed for dndManager\n    rowDirection,\n    ...otherProps\n  } = props;\n  const nodeTitle = title || node.title;\n  const nodeSubtitle = subtitle || node.subtitle;\n  const rowDirectionClass = rowDirection === \"rtl\" ? \"rst__rtl\" : null;\n\n  let handle;\n  if (canDrag) {\n    if (typeof node.children === \"function\" && node.expanded) {\n      // Show a loading symbol on the handle when the children are expanded\n      //  and yet still defined by a function (a callback to fetch the children)\n      handle = (\n        <div className=\"rst__loadingHandle\">\n          <div className=\"rst__loadingCircle\">\n            {[...new Array(12)].map((_, index) => (\n              <div\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                className={classnames(\n                  \"rst__loadingCirclePoint\",\n                  rowDirectionClass\n                )}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    } else {\n      // Show the handle used to initiate a drag-and-drop\n      handle = connectDragSource(<div className=\"rst__moveHandle\" />, {\n        dropEffect: \"copy\"\n      });\n    }\n  }\n\n  const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\n  const isLandingPadActive = !didDrop && isDragging;\n\n  // let buttonStyle = { left: -0.5 * scaffoldBlockPxWidth };\n  // if (rowDirection === \"rtl\") {\n  //   buttonStyle = { right: -0.5 * scaffoldBlockPxWidth };\n  // }\n\n  return (\n    <div style={{ height: \"100%\" }} {...otherProps}>\n      {toggleChildrenVisibility &&\n        node.children &&\n        (node.children.length > 0 || typeof node.children === \"function\") && (\n          <div>\n            {/* <button\n              type=\"button\"\n              aria-label={node.expanded ? \"Collapse\" : \"Expand\"}\n              className={classnames(\n                node.expanded ? \"rst__collapseButton\" : \"rst__expandButton\",\n                rowDirectionClass\n              )}\n              style={buttonStyle}\n              onClick={() =>\n                toggleChildrenVisibility({\n                  node,\n                  path,\n                  treeIndex\n                })\n              }\n            /> */}\n\n            {node.expanded && !isDragging && (\n              <div\n                style={{ width: scaffoldBlockPxWidth }}\n                className={classnames(\"rst__lineChildren\", rowDirectionClass)}\n              />\n            )}\n          </div>\n        )}\n\n      <div className={classnames(\"rst__rowWrapper\", rowDirectionClass)}>\n        {/* Set the row preview to be used during drag and drop */}\n        {connectDragPreview(\n          <div\n            className={classnames(\n              \"rst__row\",\n              isLandingPadActive && \"rst__rowLandingPad\",\n              isLandingPadActive && !canDrop && \"rst__rowCancelPad\",\n              isSearchMatch && \"rst__rowSearchMatch\",\n              isSearchFocus && \"rst__rowSearchFocus\",\n              rowDirectionClass,\n              className\n            )}\n            style={{\n              opacity: isDraggedDescendant ? 0.5 : 1,\n              ...style\n            }}\n          >\n            {handle}\n\n            <div\n              className={classnames(\n                \"rst__rowContents\",\n                !canDrag && \"rst__rowContentsDragDisabled\",\n                rowDirectionClass\n              )}\n            >\n              <div className={classnames(\"rst__rowLabel\", rowDirectionClass)}>\n                <span\n                  className={classnames(\n                    \"rst__rowTitle\",\n                    node.subtitle && \"rst__rowTitleWithSubtitle\"\n                  )}\n                >\n                  {typeof nodeTitle === \"function\"\n                    ? nodeTitle({\n                        node,\n                        path,\n                        treeIndex\n                      })\n                    : nodeTitle}\n                </span>\n\n                {nodeSubtitle && (\n                  <span className=\"rst__rowSubtitle\">\n                    {typeof nodeSubtitle === \"function\"\n                      ? nodeSubtitle({\n                          node,\n                          path,\n                          treeIndex\n                        })\n                      : nodeSubtitle}\n                  </span>\n                )}\n              </div>\n\n              <div className=\"rst__rowToolbar\">\n                {buttons?.map((btn, index) => (\n                  <div\n                    key={index} // eslint-disable-line react/no-array-index-key\n                    className=\"rst__toolbarButton\"\n                  >\n                    {btn}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Node;\n","import { TreeRendererProps } from \"react-sortable-tree\";\nimport classnames from \"clsx\";\nimport \"./tree-node.css\";\nimport React, { Children, cloneElement } from \"react\";\n\nexport default function TreeNode(props: TreeRendererProps) {\n  const {\n    children,\n    listIndex,\n    swapFrom = 0,\n    swapLength = 0,\n    swapDepth,\n    scaffoldBlockPxWidth,\n    lowerSiblingCounts,\n    connectDropTarget,\n    isOver,\n    draggedNode,\n    canDrop,\n    treeIndex,\n    treeId, // Delete from otherProps\n    getPrevRow, // Delete from otherProps\n    node, // Delete from otherProps\n    path, // Delete from otherProps\n    rowDirection,\n    ...otherProps\n  } = props;\n\n  const rowDirectionClass = rowDirection === \"rtl\" ? \"rst__rtl\" : null;\n\n  // Construct the scaffold representing the structure of the tree\n  const scaffoldBlockCount = lowerSiblingCounts.length;\n  const scaffold: JSX.Element[] = [];\n  const level = path.length - 1;\n  lowerSiblingCounts.forEach((lowerSiblingCount, i) => {\n    let lineClass = \"\";\n    if (level > 0) {\n      if (lowerSiblingCount > 0) {\n        // At this level in the tree, the nodes had sibling nodes further down\n\n        if (listIndex === 0) {\n          // Top-left corner of the tree\n          // +-----+\n          // |     |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass =\n            \"rst__lineHalfHorizontalRight rst__lineHalfVerticalBottom\";\n        } else if (i === scaffoldBlockCount - 1) {\n          // Last scaffold block in the row, right before the row content\n          // +--+--+\n          // |  |  |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass = \"rst__lineHalfHorizontalRight rst__lineFullVertical\";\n        } else if (i > 0) {\n          // Simply connecting the line extending down to the next sibling on this level\n          // +--+--+\n          // |  |  |\n          // |  |  |\n          // |  |  |\n          // +--+--+\n          lineClass = \"rst__lineFullVertical\";\n        }\n      } else if (listIndex === 0) {\n        // Top-left corner of the tree, but has no siblings\n        // +-----+\n        // |     |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = \"rst__lineHalfHorizontalRight\";\n      } else if (i === scaffoldBlockCount - 1) {\n        // The last or only node in this level of the tree\n        // +--+--+\n        // |  |  |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = \"rst__lineHalfVerticalTop rst__lineHalfHorizontalRight\";\n      }\n    }\n\n    scaffold.push(\n      <div\n        key={`pre_${1 + i}`}\n        style={{ width: scaffoldBlockPxWidth }}\n        className={classnames(\"rst__lineBlock\", lineClass, rowDirectionClass)}\n      />\n    );\n\n    if (treeIndex !== listIndex && i === swapDepth) {\n      // This row has been shifted, and is at the depth of\n      // the line pointing to the new destination\n      let highlightLineClass = \"\";\n\n      if (listIndex === swapFrom + swapLength - 1) {\n        // This block is on the bottom (target) line\n        // This block points at the target block (where the row will go when released)\n        highlightLineClass = \"rst__highlightBottomLeftCorner\";\n      } else if (treeIndex === swapFrom) {\n        // This block is on the top (source) line\n        highlightLineClass = \"rst__highlightTopLeftCorner\";\n      } else {\n        // This block is between the bottom and top\n        highlightLineClass = \"rst__highlightLineVertical\";\n      }\n\n      let style;\n      if (rowDirection === \"rtl\") {\n        style = {\n          width: scaffoldBlockPxWidth,\n          right: scaffoldBlockPxWidth * i\n        };\n      } else {\n        // Default ltr\n        style = {\n          width: scaffoldBlockPxWidth,\n          left: scaffoldBlockPxWidth * i\n        };\n      }\n\n      scaffold.push(\n        <div\n          // eslint-disable-next-line react/no-array-index-key\n          key={i}\n          style={style}\n          className={classnames(\n            \"rst__absoluteLineBlock\",\n            highlightLineClass,\n            rowDirectionClass\n          )}\n        />\n      );\n    }\n  });\n\n  let style;\n  if (rowDirection === \"rtl\") {\n    style = { right: scaffoldBlockPxWidth * scaffoldBlockCount };\n  } else {\n    // Default ltr\n    style = { left: scaffoldBlockPxWidth * scaffoldBlockCount };\n  }\n\n  return connectDropTarget(\n    <div {...otherProps} className={classnames(\"rst__node\", rowDirectionClass)}>\n      {scaffold}\n\n      <div className=\"rst__nodeContent\" style={style}>\n        {Children.map(children, (child) =>\n          cloneElement(child, {\n            isOver,\n            canDrop,\n            draggedNode\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortableTree, { TreeItem } from \"react-sortable-tree\";\nimport Node from \"./node\";\nimport TreeNode from \"./tree-node\";\n\nconst isTouchDevice = !!(\"ontouchstart\" in window || navigator.maxTouchPoints);\nconst dndBackend = isTouchDevice ? TouchBackend : HTML5Backend;\n\nexport default function Tree() {\n  const [treeData, setTreeData] = useState<TreeItem[]>([\n    { title: \"Chicken\", expanded: true, children: [{ title: \"Egg\" }] },\n    { title: \"Chicken\", expanded: true, children: [{ title: \"Egg\" }] }\n  ]);\n  return (\n    <DndProvider backend={dndBackend}>\n      <div>\n        <span>\n          This is {!isTouchDevice && \"not \"}a touch-supporting browser\n        </span>\n        <div style={{ height: 300 }}>\n          <SortableTree\n            treeData={treeData}\n            onChange={(result) => setTreeData(result)}\n            canDrag={({ node }) => !node.noDragging}\n            isVirtualized={false}\n            canDrop={({ nextParent }) => !nextParent || !nextParent.noChildren}\n            theme={{\n              nodeContentRenderer: Node,\n              treeNodeRenderer: TreeNode\n            }}\n          />\n        </div>\n      </div>\n    </DndProvider>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport \"react-sortable-tree/style.css\";\n\nimport Tree from \"./tree\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Tree />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}